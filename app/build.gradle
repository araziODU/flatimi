/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8/userguide/building_java_projects.html
 */

buildscript {
  repositories { mavenCentral() }
  dependencies { classpath 'org.ajoberstar:gradle-git:0.2.3'
  				classpath "com.github.fracpete:rsync4j-all:3.1.2-15" }
}
plugins {
   id 'java'
   id "org.xbib.gradle.plugin.git" version "2.0.0"
   id "org.jbake.site" version "5.5.0"
   id 'maven-publish'
   
}
import org.ajoberstar.gradle.git.tasks.*;
import com.github.fracpete.rsync4j.RSync;  
import com.github.fracpete.processoutput4j.output.ConsoleOutputProcessOutput;
java {
    sourceCompatibility = JavaVersion.toVersion(11)
    targetCompatibility = JavaVersion.toVersion(11)
}

repositories {
    jcenter()
    mavenLocal()
   
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0' 
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
}

test { 
    ignoreFailures = true
    useJUnitPlatform()
}

task reports (dependsOn: ['javadoc', 'check']) {
    description 'Generate all reports for this project'
}


task copyJDocs (type: Copy) {
    from 'app/build/docs'
    into 'app/build/tmp/website/assets'
    dependsOn 'javadoc'
}

task copyReports (type: Copy) {
    from 'app/build/reports'
    into 'app/build/tmp/website/assets'
    dependsOn 'reports'
}

task copyJbakeTemplates (type: Copy) {
    from 'app/src/jbake'
    into 'app/build/tmp/website'
}

task buildHomePage (dependsOn: copyJbakeTemplates) {
	 inputs.files ( 'app/build/tmp/website/content/home0.md', '../README.md')
	 outputs.file ( 'app/build/tmp/website/content/home0.md' )
	 doLast  {
	     outputs.files.singleFile.withOutputStream { out ->
	         for ( file in inputs.files ) file.withInputStream {
		 	     out << it << '\n' }
	    }
	 }
}

jbake {
	 srcDirName = "app/build/tmp/website"
}

task setupWebsite (dependsOn: ['buildHomePage', 'copyReports', 'copyJDocs']){
}

bake.dependsOn "setupWebsite"


task deployreports (dependsOn: "bake") {
    doLast {
        def sourceDir = "$buildDir/jbake/";
        def destURL = "git@github.com:araziODU/ContinuousIntegration.git";  
        RSync rsync = new RSync()
                .source(sourceDir)
                .destination(destURL)
                .recursive(true)
                .archive(true)
                .delete(true)
                .verbose(true)
                .rsh("ssh -o IdentitiesOnly=yes");  
        ConsoleOutputProcessOutput output = new ConsoleOutputProcessOutput();
        output.monitor(rsync.builder());
    }
}

test {
    ignoreFailures = true
}
/*

task clonePages(type GitClone) {                                             
    doLast {
        mkdir 'build/gh-pages'
        def thisRepo = rootProject.projectDir.toString()
        def pagesDir = "$buildDir/gh-pages"
        
        project.delete {
            delete pagesDir
        }
        
        
        def grgit = git.clone {
            dir = pagesDir
            uri = 'file:' + thisRepo
            bare = false
            refToCheckout = 'gh-pages'
        }
        grgit.checkout {
            branch = 'gh-pages'
        }
    }
}


task copyReports2 (type: Copy, dependsOn: ['bake', 'clonePages']) {  
    from "..$buildDir/lib/build/jbake"
    into "..$buildDir/lib/build/gh-pages"
}

task deployReports (dependsOn: 'copyReports2') {                     
    group = "Reporting"
    description  'Copies reports to the gh-pages branch in preparation for a future push to GitHub'
    doLast {
        def pagesDir = "..$buildDir/lib/build/gh-pages"
        def grgit = git.open {
            dir = pagesDir + "/.git"
        }
        grgit.add (update: false, patterns: ['reports/'])
        grgit.add (update: true, patterns: ['reports/'])
        grgit.commit {
            message = "Updating web pages"
        }
        grgit.push {}
    }
}
/*
task reports2(dependsOn: ['javadoc','test']){
 description 'Generate all reports for this project'
}


test.ignoreFailures=true


task reports (dependsOn: ['javadoc', 'check']) {
    description 'Generate all reports for this project'
}


task copyJDocs (type: Copy) {
    from 'lib/build/docs'
    into 'lib/build/tmp/website/assets'
    dependsOn 'javadoc'
}

task copyTests (type: Copy) {
    from 'lib/build/tests'
    into 'lib/build/tmp/website/assets'
    dependsOn 'reports'
}

task copyJbakeTemplates (type: Copy) {
    from 'lib/src/jbake'
    into 'lib/build/tmp/website'
}

task buildHomePage (dependsOn: copyJbakeTemplates) {
	 inputs.files ( 'lib/build/tmp/website/content/home0.md')
	 outputs.file ( 'lib/build/tmp/website/content/index.md' )
	 doLast  {
	     outputs.files.singleFile.withOutputStream { out ->
	         for ( file in inputs.files ) file.withInputStream {
		 	     out << it << '\n' }
	    }
	 }
}

jbake {
	 srcDirName = "lib/build/tmp/website"
}

task setupWebsite (dependsOn: ['buildHomePage', 'copyTests', 'copyJDocs']){
}

bake.dependsOn "setupWebsite"

task deployReports (dependsOn: "bake") {
    doLast {
        def sourceDir = "build/jbake/";
        def destURL = "https://araziodu.github.io/ContinuousIntegration/";  
        RSync rsync = new RSync()
                .source(sourceDir)
                .destination(destURL)
                .recursive(true)
                .archive(true)
                .delete(true)
                .verbose(true)
                .rsh("ssh -o IdentitiesOnly=yes");  
        ConsoleOutputProcessOutput output = new ConsoleOutputProcessOutput();
        output.monitor(rsync.builder());
    }
}

/*

task clonePages() {                                             
    doLast {
        mkdir 'lib/build/gh-pages'
        def thisRepo = rootProject.projectDir.toString()
        def pagesDir = "lib/build/gh-pages"
        project.delete {
            delete pagesDir
        }
        def grgit = git.clone {
            dir = pagesDir
            uri = 'file:' + thisRepo
            bare = false
            refToCheckout = 'gh-pages'
        }
        grgit.checkout {
            branch = 'gh-pages'
        }
    }
}

task copyReports2 (type: Copy, dependsOn: ['bake', 'clonePages']) {  
    from "build/jbake"
    into "libs/build/gh-pages"
}



task deployReports (dependsOn: 'copyReports2') {                     
    group = "Reporting"
    description  'Copies reports to the gh-pages branch in preparation for a future push to GitHub'
    doLast {
        def pagesDir = "lib/build/gh-pages"
        def grgit = git.open {
            dir = pagesDir + "/.git"
        }
        grgit.add (update: false, patterns: ['tests/'])
        grgit.add (update: true, patterns: ['tests/'])
         grgit.add (update: false, patterns: ['javadoc/'])
        grgit.add (update: true, patterns: ['javadoc/'])
        grgit.commit {
            message = "Updating web pages"
        }
        grgit.push {}
    }
}
*/
//

